
1) Project-Employee Database
Consider the following Entities and their Relationships for Project-Employee 
database.

Project (pno integer, pname char (30), ptype char (20), duration integer)
Employee (eno integer, ename char (20), qualification char (15), joining_date date)

Relationship between Project and Employee is many to many with descriptive attribute 
start_date date, no_of_hours_worked integer.

Constraints: Primary Key, duration should be greater than zero, 
pname should not be null.

CREATE TABLE Project (
  pno INTEGER PRIMARY KEY,
  pname CHAR(30) NOT NULL,
  ptype CHAR(20),
  duration INTEGER CHECK (duration > 0)
);


INSERT INTO Project (pno, pname, ptype, duration)
VALUES (1, 'Project A', 'Software Development', 10),
       (2, 'Project B', 'Hardware Design', 12),
       (3, 'Project C', 'Web Development', 8),
       (4, 'Project D', 'Data Analysis', 6),
       (5, 'Project E', 'Mobile App Development', 9);




CREATE TABLE Employee (
  eno INTEGER PRIMARY KEY,
  ename CHAR(20),
  qualification CHAR(15),
  joining_date DATE
);


INSERT INTO Employee (eno, ename, qualification, joining_date)
VALUES (1, 'John Smith', 'B.Sc. Computer Science', '2022-01-01'),
       (2, 'Alice Johnson', 'B.E. Electronics', '2022-03-01'),
       (3, 'Bob Williams', 'M.Sc. Data Science', '2022-05-01'),
       (4, 'Eve Brown', 'M.E. Computer Engineering', '2022-07-01'),
       (5, 'Michael Davis', 'B.Sc. Mathematics', '2022-09-01');



CREATE TABLE Project_Employee (
  pno INTEGER,
  eno INTEGER,
  start_date DATE,
  no_of_hours_worked INTEGER,
  PRIMARY KEY (pno, eno),
  FOREIGN KEY (pno) REFERENCES Project (pno),
  FOREIGN KEY (eno) REFERENCES Employee (eno)
);



INSERT INTO Project_Employee (pno, eno, start_date, no_of_hours_worked)
VALUES (1, 1, '2022-01-05', 40),
       (1, 2, '2022-01-05', 35),
       (1, 3, '2022-01-05', 45),
       (2, 3, '2022-03-15', 30),
       (2, 4, '2022-03-15', 25),
       (2, 5, '2022-03-15', 20),
       (3, 1, '2022-05-01', 30),
       (3, 4, '2022-05-01', 35),
       (4, 2, '2022-07-01', 40),
       (4, 5, '2022-07-01', 45),
       (5, 3, '2022-09-01', 50),
       (5, 4, '2022-09-01', 55),
       (5, 5, '2022-09-01', 60);

CreateCreate a View:

1. To display the project name, project type, and project start date, sorted by project start date. 

CREATE VIEW project_start_dates AS
SELECT p.pname, p.ptype, pe.start_date
FROM Project p
JOIN Project_Employee pe ON p.pno = pe.pno
ORDER BY pe.start_date;

select project_start_dates;

2. To display details of employees working on 'Robotics' project.


CREATE VIEW robotics_employees AS
SELECT e.eno, e.ename, e.qualification, e.joining_date, pe.start_date, pe.no_of_hours_worked
FROM Employee e
JOIN Project_Employee pe ON e.eno = pe.eno
JOIN Project p ON p.pno = pe.pno
WHERE p.pname = 'Robotics';

select robotics_employees;


Q.2) Using above database solve following questions:

1. Write a trigger before inserting the duration into the project table and make sure that the duration is always greater than zero. Display appropriate message.


CREATE TRIGGER check_duration
BEFORE INSERT ON Project
FOR EACH ROW
BEGIN
  IF NEW.duration <= 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duration must be greater than zero';
  END IF;
END;



2. Write function using cursor to accept project name as an input parameter and display names of employees working on that project.


CREATE FUNCTION get_employee_names (pname CHAR(30))
RETURNS VARCHAR(1000) 
as'

BEGIN
  DECLARE result VARCHAR(1000) DEFAULT '';
  DECLARE done INT DEFAULT FALSE;
  DECLARE ename CHAR(20);
  DECLARE cur CURSOR FOR
    SELECT e.ename
    FROM Employee e
    JOIN Project_Employee pe ON e.eno = pe.eno
    JOIN Project p ON p.pno = pe.pno
    WHERE p.pname = pname;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  
  OPEN cur;
  REPEAT
    FETCH cur INTO ename;
    IF NOT done THEN
      SET result = CONCAT(result, ename, ', ');
    END IF;
  UNTIL done END REPEAT;
  CLOSE cur;
  
  RETURN TRIM(TRAILING ', ' FROM result);
END;
'LANGUAGE'plpgsql';

select function get_employee_names('Project A');