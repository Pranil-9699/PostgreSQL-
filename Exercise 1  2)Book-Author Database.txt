Book-Author Database
Consider the following Entities and their Relationships for Book-Author database. 
Book(b_no int, b_name varchar (20), pub_name varchar (10), b_price float)
Author (a_no int, a_name varchar (20), qualification varchar (15), address varchar (15))
Relationship between Book and Author is many to many.
Constraints: Primary Key,pub_name should not be null.
Solve the following Queries in PostgreSQL:

CREATE TABLE Book (
  b_no integer PRIMARY KEY,
  b_name varchar (20),
  pub_name varchar (10) NOT NULL,
  b_price float
);

CREATE TABLE Author (
  a_no integer PRIMARY KEY,
  a_name varchar (20),
  qualification varchar (15),
  address varchar (15)
);

CREATE TABLE Book_Author (
  b_no integer REFERENCES Book(b_no),
  a_no integer REFERENCES Author(a_no),
  PRIMARY KEY (b_no, a_no)
);


INSERT INTO Author (a_no, a_name, qualification, address) VALUES
(1, 'John Smith', 'PhD', 'New York'),
(2, 'Jane Doe', 'MSc', 'Los Angeles'),
(3, 'Bob Johnson', 'BSc', 'Chicago'),
(4, 'Alice Williams', 'MBA', 'Houston'),
(5, 'Charlie Brown', 'MA', 'Philadelphia');

INSERT INTO Book (b_no, b_name, pub_name, b_price) VALUES
(1, 'Book 1', 'Publisher 1', 20.99),
(2, 'Book 2', 'Publisher 2', 25.99),
(3, 'Book 3', 'Publisher 3', 15.99),
(4, 'Book 4', 'Publisher 4', 10.99),
(5, 'Book 5', 'Publisher 5', 35.99);

INSERT INTO Book_Author (b_no, a_no) VALUES
(1, 1), (1, 2), (1, 3),
(2, 2), (2, 3), (2, 3),
(3, 1), (3, 2), (3, 3);


1. List details of all books written by ‘ ’

SELECT b.b_no, b.b_name, b.pub_name, b.b_price
FROM Book b
JOIN Book_Author ba ON b.b_no = ba.b_no
JOIN Author a ON a.a_no = ba.a_no
WHERE a.a_name = ' ';


2. Count the number of books published by ‘Nirali Publication’.

SELECT COUNT(*)
FROM Book
WHERE pub_name = 'Nirali Publication';


3. List book details for which book price is between 400.00 and 600.00.

SELECT *
FROM Book
WHERE b_price BETWEEN 400.00 AND 600.00;


4. List all author details sorted by their name in ascending order.

SELECT *
FROM Author
ORDER BY a_name ASC;


5. Change the publisher name from 'Niyati Publications' to 'Jagruti Publications'.

UPDATE Book
SET pub_name = 'Jagruti Publications'
WHERE pub_name = 'Niyati Publications';


6. List the details of all books whose names start with the alphabet ‘S’.

SELECT *
FROM Book
WHERE b_name LIKE 'S%';


7. List author wise details of books.

SELECT a.*, b.*
FROM Author a
JOIN Book b ON a.a_no = b.a_no
ORDER BY a.a_name ASC;


8. Display details of authors who have written atleast 2 books.
SELECT a.*
FROM Author a
JOIN Book b ON a.a_no = b.a_no
GROUP BY a.a_no
HAVING COUNT(b.b_no) >= 2;


9. List the details of all books written by author living in ‘Nashik’.
SELECT b.*
FROM Book b
JOIN Author a ON b.a_no = a.a_no
WHERE a.address = 'Nashik';


10. Display details of authors who have written maximum number of books.

SELECT a.*
FROM Author a
JOIN Book b ON a.a_no = b.a_no
GROUP BY a.a_no
HAVING COUNT(b.b_no) = (SELECT MAX(COUNT(b.b_no)) FROM Book b JOIN Author a ON b.a_no = a.a_no GROUP BY a.a_no);
